name: CI/CD for Monorepo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build, Test, and Push UI and Core Images
  # test: 
  #   runs-on: ubuntu-latest
  build-and-push:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'release')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.title, 'release'))
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start PostgreSQL Database
        if: contains(github.event.head_commit.message, 'release(core)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          docker run --name test-postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=test -p 5432:5432 -d postgres:15
      - name: Wait for Database
        if: contains(github.event.head_commit.message, 'release(core)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          until docker exec test-postgres pg_isready -U testuser -d testdb -h localhost; do
            echo "Waiting for database...";
            sleep 5;
          done

      # Step 2: Authenticate with DigitalOcean
      - name: Authenticate with DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DOCR
        run: doctl registry login
      
      - name: Set up Kubernetes Kubeconfig
        run: doctl kubernetes cluster kubeconfig save london-cluster

      - name: Install Node.js for Core
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Core Dependencies
        run: npm ci

      # Step 3: Build and Push UI Image
      - name: Build UI Docker Image
        if: contains(github.event.head_commit.message, 'release(ui)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          docker build -t registry.digitalocean.com/firebrick/ui:${{ github.sha }} -f Dockerfile .

      - name: Tag Docker Image
        if: contains(github.event.head_commit.message, 'release(ui)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
           docker tag registry.digitalocean.com/firebrick/ui:${{ github.sha }} registry.digitalocean.com/firebrick/ui:latest

      - name: Push UI Docker Image with Latest Tag
        if: contains(github.event.head_commit.message, 'release(ui)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          docker push registry.digitalocean.com/firebrick/ui:${{ github.sha }}
          docker push registry.digitalocean.com/firebrick/ui:latest
      
      - name: Cleanup Old UI Images
        if: contains(github.event.head_commit.message, 'release(ui)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          doctl registry repository list-tags firebrick/ui --format Tag --no-header | tail -n +6 | xargs -I {} doctl registry repository delete-tag firebrick/ui:{} --force

      - name: Deploy to Kubernetes
        if: contains(github.event.head_commit.message, 'release(ui)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          kubectl set image deployment/ui-deployment ui=registry.digitalocean.com/firebrick/ui:latest
          kubectl annotate deployment/ui-deployment kubernetes.io/change-cause="Commit: $COMMIT_MESSAGE"
          kubectl rollout status deployment/ui-deployment
          

      # Step 4: Build, Test, and Push Core Image
      - name: Set Database URL
        run: echo "DATABASE_URL=postgresql://test:test@localhost:5432/test" >> $GITHUB_ENV

      - name: Generate prisma
        run: npm run prisma:generate

      # - name: Run Core Tests
      #   run: npm test

      - name: Build Core Docker Image
        if: contains(github.event.head_commit.message, 'release(core)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          docker build -t registry.digitalocean.com/firebrick/core:${{ github.sha }} -f Dockerfile .

      - name: Tag Core Docker Image
        if: contains(github.event.head_commit.message, 'release(core)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
           docker tag registry.digitalocean.com/firebrick/core:${{ github.sha }} registry.digitalocean.com/firebrick/core:latest
           
      - name: Push Core Docker Image with Latest Tag
        if: contains(github.event.head_commit.message, 'release(core)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          docker push registry.digitalocean.com/firebrick/core:${{ github.sha }}
          docker push registry.digitalocean.com/firebrick/core:latest

      - name: Cleanup Old Core Images
        if: contains(github.event.head_commit.message, 'release(core)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          doctl registry repository list-tags firebrick/core --format Tag --no-header | tail -n +6 | xargs -I {} doctl registry repository delete-tag firebrick/core:{} --force

      - name: Deploy to Kubernetes
        if: contains(github.event.head_commit.message, 'release(core)') || contains(github.event.head_commit.message, 'release(all)')
        run: |
          kubectl set image deployment/core-deployment core=registry.digitalocean.com/firebrick/core:latest
          kubectl annotate deployment/core-deployment kubernetes.io/change-cause="Commit: $COMMIT_MESSAGE"
          kubectl rollout status deployment/core-deployment
